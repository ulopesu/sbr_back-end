package com.sample
 
import com.sample.Camara;

import java.util.Date;
import java.util.ArrayList;

//TODO: FAZER AS 3 REGRAS CORRETAMENTE
/*
	Caso a temperatura de uma câmara de vacina chegue perto dos limites dos
	parâmetros, deve-se notificar os gestores;
	
	Caso a temperatura de uma câmara de vacina fique fora dos limites dos
	parâmetros definidos (situação grave), o gestor que estiver mais perto do local
	do armazenamento da vacina deve ser chamado para comparecer ao local;
	
	Caso a temperatura de uma câmara de vacina fique fora dos limites dos
	parâmetros definidos durante um certo intervalo de tempo (a ser definido), o
	sistema deve sugerir o descarte do produto. (VERIFICAR INTEGRIDADE DA VAC)
*/
 
/*
//PERGUNTAR PATRICIA

rule "Lote TempLimiar"
    when
    	$lote: Lote((vac.getTempMin() < cam.getTemperatura() && (vac.getTempMin()+2) > cam.getTemperatura()) || (vac.getTempMax() > cam.getTemperatura() && (vac.getTempMax()-2) < cam.getTemperatura()))
    	
    then
    	System.out.println("\nCAMARA: "+  $lote.getCam().getNome() +" - tempCam:" +  $lote.getCam().getTemperatura());
        $lote.getCam().notificarGestores();
end
*/

// SUGESTÃO: CRIAR TPO ENUMERADO PARA MENSAGENS PADRONIZADAS.


declare TempRuimMax
	lote: Lote;
	temp: double;
	present: boolean;
	starded: Date;
	finished: Date;
end

declare TempRuimMin
	lote: Lote;
	temp: double;
	present: boolean;
	starded: Date;
	finished: Date;
end

declare descarte
	lote: Lote;
end


rule "Lote Temp Limiar Negativo"
    when
    	$lote: Lote($check: checarTempLimiar==1, util==true)
    then
        $lote.getCam().notificarGestores($check);
end

rule "Lote Temp Limiar Positivo"
    when
    	$lote: Lote($check:checarTempLimiar==2, util==true)
    then
        $lote.getCam().notificarGestores($check);
end


rule "Lote Temp Ruim Negativo"
    when
    	$lote: Lote($check:checarTempRuim==4, $temp: cam.getTemperatura(), util==true)
    	not (exists (TempRuimMin(lote==$lote, present==true)))
    then
        $lote.getCam().chamarGestor($check);
        insert (new TempRuimMin($lote, $temp, true, new Date(), null));
end

rule "Lote Temp Ruim Positivo"
    when
    	$lote: Lote($check:checarTempRuim==5, $temp: cam.getTemperatura(), util==true)
    	not (exists (TempRuimMax(lote==$lote, present==true)))
    then
        $lote.getCam().chamarGestor($check);
        insert (new TempRuimMax($lote, $temp, true, new Date(), null));
end

rule "Lote Temp Min OK"
    when
    	$lote: Lote($check:checarTempRuim==6, util==true)
    	$tempRuim: TempRuimMin(lote==$lote, present==true)
    then
		$tempRuim.setPresent(false);
		$tempRuim.setFinished(new Date());
		update($tempRuim);
end


rule "Lote Temp Max OK"
    when
    	$lote: Lote($check:checarTempRuim==6, util==true)
    	$tempRuim: TempRuimMax(lote==$lote, present==true)
    then
		$tempRuim.setPresent(false);
		$tempRuim.setFinished(new Date());
		update($tempRuim);
end


rule "Descarte TempMin"
	when
		$lote: Lote($vac:vac, util==true)
		TempRuimMin(lote == $lote, (System.currentTimeMillis() - starded.getTime()) > 10)
	then
		$lote.setUtil(false);
		update($lote);
		insertLogical(new descarte($lote));
		System.out.println("Descarte TempMin");
end


rule "Descarte TempMax"
	when
		$lote: Lote($vac:vac, util==true)
		TempRuimMax(lote == $lote, (System.currentTimeMillis() - starded.getTime()) > 10)
	then
		$lote.setUtil(false);
		update($lote);
		insertLogical(new descarte($lote));
		System.out.println("Descarte TempMax");
end




