package com.sample
 
import com.sample.Camara;

import java.util.Date;
import java.util.ArrayList;

function long currentTime(){
  return System.currentTimeMillis();
}

//TODO: FAZER AS 3 REGRAS CORRETAMENTE
/*
	Caso a temperatura de uma câmara de vacina chegue perto dos limites dos
	parâmetros, deve-se notificar os gestores;
	
	Caso a temperatura de uma câmara de vacina fique fora dos limites dos
	parâmetros definidos (situação grave), o gestor que estiver mais perto do local
	do armazenamento da vacina deve ser chamado para comparecer ao local;
	
	Caso a temperatura de uma câmara de vacina fique fora dos limites dos
	parâmetros definidos durante um certo intervalo de tempo (a ser definido), o
	sistema deve sugerir o descarte do produto. (VERIFICAR INTEGRIDADE DA VAC)
*/


/*
Sugestões de roteiro para apresentações (com uso de slides) – 30 minutos cada grupo:

- Apresente visão geral do sistema desenvolvido (use figuras de preferencia), tipo:
- Visão geral das funcionalidades do sistema (o que o sistema é capaz de fazer?)
- Modelo de classes/componentes

- Como as funcionalidades citadas acima são implementadas (como o sistema é implementado em termos de regras drools, threads, sensores, etc.)
- Demonstração da ferramenta...




--- ANALISAR VARIACAO ENTRE TEMPERATURAS EXTREMAS!
*/


declare TempRuimMax
	lote: Lote;
	temp: double;
	inicio: Date;
	fim: Date;
	valido: boolean;
end

declare TempRuimMin
	lote: Lote;
	temp: double;
	inicio: Date;
	fim: Date;
	valido: boolean;
end

declare descarte
	lote: Lote;
end


rule "Lote Temp Limiar Negativo"
    when
    	$lote: Lote(checarTempLimiar==CodigoAlerta.MARGEM_MIN, $util:util==true)
    then
        $lote.getCam().notificarGestores(CodigoAlerta.MARGEM_MIN, $lote);
end

rule "Lote Temp Limiar Positivo"
    when
    	$lote: Lote(checarTempLimiar==CodigoAlerta.MARGEM_MAX, util==true)
    then
        $lote.getCam().notificarGestores(CodigoAlerta.MARGEM_MAX, $lote);
end


rule "Lote Temp Ruim Negativo"
    when
    	$lote: Lote(checarTempRuim==CodigoAlerta.TEMP_MIN, $cam:cam, util==true)
    	Camara(this==$cam, $temp:temperatura)
    	not (exists (TempRuimMin(lote==$lote, valido==true)))
    then
    	insert (new TempRuimMin($lote, $temp, new Date(), null, true));
        $cam.chamarGestor(CodigoAlerta.TEMP_MIN, $lote);
        
end


rule "Lote Temp Ruim Positivo"
    when
    	$lote: Lote(checarTempRuim==CodigoAlerta.TEMP_MAX, $cam:cam, util==true)
    	Camara(this==$cam, $temp:temperatura)
    	not (exists (TempRuimMax(lote==$lote, valido==true)))
    then
    	insert (new TempRuimMax($lote, $temp, new Date(), null, true));
        $cam.chamarGestor(CodigoAlerta.TEMP_MAX, $lote);  
end


rule "Lote Temp Dif Min"
    when
    	$lote: Lote(checarTempRuim != CodigoAlerta.TEMP_MIN, util==true)
    	$tempRuim: TempRuimMin(lote==$lote, valido==true)
    then
    	System.out.println("Temp Min OK");
		$tempRuim.setFim(new Date());
		$tempRuim.setValido(false);
		update($tempRuim);
end


rule "Lote Temp Dif Max"
    when
    	$lote: Lote(checarTempRuim != CodigoAlerta.TEMP_MAX, util==true)
    	$tempRuim: TempRuimMax(lote==$lote, valido==true)
    then
    	System.out.println("Temp Max OK");
		$tempRuim.setFim(new Date());
		$tempRuim.setValido(false);
		update($tempRuim);
end


rule "Descarte TempMin"
	when
		$lote: Lote($cam:cam, $vac:vac, util==true)
		Camara(this==$cam, $temp:temperatura)
		TempRuimMin(lote == $lote, $inicioTime: inicio.getTime(), valido==true)
		eval((currentTime()-$inicioTime) > Constante.LimiteExposicao)
	then
		insertLogical(new descarte($lote));
		$lote.setUtil(false);
		update($lote);
		$cam.notificarGestores(CodigoAlerta.DESCARTE_MIN, $lote); 
end


rule "Descarte TempMax"
	when
		$lote: Lote($cam:cam, $vac:vac, util==true)
		TempRuimMax(lote == $lote, $inicioTime: inicio.getTime(), valido==true)
		eval((currentTime()-$inicioTime) > Constante.LimiteExposicao)
		Camara(this==$cam, $temp:temperatura)
	then
		insertLogical(new descarte($lote));
		$lote.setUtil(false);
		update($lote);	
		$cam.notificarGestores(CodigoAlerta.DESCARTE_MAX, $lote); 
end





