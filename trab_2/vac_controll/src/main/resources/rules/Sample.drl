package com.vac_controll.model;

import java.util.Date;
import java.util.ArrayList;
import java.time.ZoneId;

function long tempoAtual(){
	return System.currentTimeMillis();
}


rule "Lote com Temperatura Perigosa"
    when
    	$lote: 
		Lote(
			$codigoLote: checarTemp != CodigoAlerta.TEMP_OK, 
			$cam:camara, 
			$util:util == true
		)
		Camara(this==$cam, $temp:temperatura)
		not (exists (TempRuim(lote == $lote, fim == null)))
    then
		insert(new TempRuim($lote, $temp, new Date(), $codigoLote));
end

rule "MudanÃ§a de Estado do Lote"
    when
    	$lote: Lote($codigoLote:checarTemp, $cam:camara, $util:util)
		Camara(this==$cam, $temp:temperatura)
		$tempRuim: TempRuim(lote == $lote, fim == null, codigo != $codigoLote)
    then
		$tempRuim.setFim(new Date());
		$tempRuim.setFoiAlterada(true);
		update($tempRuim);
		if($codigoLote != CodigoAlerta.TEMP_OK && $util == true){
			insert(new TempRuim($lote, $temp, new Date(), $codigoLote));
		}
end


rule "Descarte Por Temperatura"
	when
		$lote: Lote($cam:camara, $vac:vacina, util == true)
		TempRuim(	
			lote == $lote, 
			$inicioTime: inicio.getTime(), 
			fim == null, 
			$codigoTempRuim: codigo == CodigoAlerta.TEMP_MIN || == CodigoAlerta.TEMP_MAX
		)
		eval((tempoAtual()-$inicioTime) > Constante.LimiteExposicao)
		not (exists (Descarte(lote == $lote)))
	then
		insert(new Descarte(new Date(), $lote, $codigoTempRuim));
end


rule "Descarte Por Validade"
	when
		$lote: Lote(
			validade.atStartOfDay(
				ZoneId.systemDefault()
			).toInstant().plusMillis(
				Constante.DiaEmMilesimos
			).toEpochMilli() < tempoAtual()
		)
		not (exists (Descarte(lote == $lote)))
	then
		insert(new Descarte(new Date(), $lote, CodigoAlerta.VALIDADE));
end


// CONSULTAS (QUERIES)
query "novasTempRuim"
	tempRuim: TempRuim(foiAlterada)
end

query "novosDescartes"
	descarte: Descarte(id == null)
end