package com.vac_controll.model;

import java.util.Date;
import java.util.ArrayList;
import java.time.ZoneId;

function long tempoAtual(){
	return System.currentTimeMillis();
}

//function CodigoAlerta checarTempDRL(Vacina vacina, Double tempCamara) {
//	if (vacina.getTempMax() <= tempCamara) {
//		return CodigoAlerta.TEMP_MAX;
//	} else if (vacina.getTempMin() >= tempCamara) {
//		return CodigoAlerta.TEMP_MIN;
//	} else if (vacina.getTempMax() >= tempCamara
//			&& (vacina.getTempMax() - vacina.getTemp_margem()) <= tempCamara) {
//		return CodigoAlerta.MARGEM_MAX;
//	} else if (vacina.getTempMin() <= tempCamara
//			&& (vacina.getTempMin() + vacina.getTemp_margem()) >= tempCamara) {
//		return CodigoAlerta.MARGEM_MIN;
//	} else {
//		return CodigoAlerta.TEMP_OK;
//	}
//}


//rule "Lote com Temperatura Perigosa"
//    when
//    	$lote: Lote(
//			$tempCam:camara.getTemperatura(), 
//			$util:util == true, 
//			$codigoLote:checarTempDRL(vacina, camara.getTemperatura()) != CodigoAlerta.TEMP_OK
//		)
//		not (exists (TempRuim(lote == $lote, fim == null)))
//    then
//		insert(new TempRuim($lote, $tempCam, new Date(), $codigoLote));
//end
//
//
//rule "Mudança de Estado do Lote"
//    when
//    	$lote: Lote(
//			$tempCam:camara.getTemperatura(), 
//			$vac:vacina,
//			$codigoLote:checarTempDRL(vacina, camara.getTemperatura()),
//			$util:util
//		)
//		$tempRuim: TempRuim(lote == $lote, fim == null, codigo != $codigoLote)
//    then
//		$tempRuim.setFim(new Date());
//		$tempRuim.setFoiAlterada(true);
//		update($tempRuim);
//		if($codigoLote != CodigoAlerta.TEMP_OK && $util == true){
//			insert(new TempRuim($lote, $tempCam, new Date(), $codigoLote));
//		}
//end

rule "Lote com Temperatura Perigosa"
    when
		$lote: Lote(
			$codigoLote: checarTemp != CodigoAlerta.TEMP_OK, 
			$cam:camara, 
			$util:util == true
		)
		Camara(this==$cam, $temp:temperatura)
		not (exists (TempRuim(lote == $lote, fim == null)))
    then
		insert(new TempRuim($lote, $temp, new Date(), $codigoLote));
end

rule "Mudança de Estado do Lote"
    when
    	$lote: Lote($codigoLote:checarTemp, $cam:camara, $util:util)
		Camara(this==$cam, $temp:temperatura)
		$tempRuim: TempRuim(lote == $lote, fim == null, codigo != $codigoLote)
    then
		$tempRuim.setFim(new Date());
		$tempRuim.setFoiAlterada(true);
		update($tempRuim);
		if($codigoLote != CodigoAlerta.TEMP_OK && $util == true){
			insert(new TempRuim($lote, $temp, new Date(), $codigoLote));
		}
end


rule "Descarte Por Temperatura"
	when
		$lote: Lote($cam:camara, $vac:vacina, util == true)
		TempRuim(	
			lote == $lote, 
			$inicioTime: inicio.getTime(), 
			fim == null, 
			$codigoTempRuim: codigo == CodigoAlerta.TEMP_MIN || == CodigoAlerta.TEMP_MAX
		)
		eval((tempoAtual()-$inicioTime) > Constante.LimiteExposicao)
		not (exists (Descarte(lote == $lote)))
	then
		insert(new Descarte(new Date(), $lote, $codigoTempRuim));
end


rule "Descarte Por Validade"
	when
		$lote: Lote(
			validade.atStartOfDay(
				ZoneId.systemDefault()
			).toInstant().plusMillis(
				Constante.DiaEmMili
			).toEpochMilli() < tempoAtual()
		)
		not (exists (Descarte(lote == $lote)))
	then
		insert(new Descarte(new Date(), $lote, CodigoAlerta.VALIDADE));
end

rule "Possivel Defeito na Camara"
	when
		$camara: Camara(alertaDefeito == false)
		$tempsRuins: ArrayList(size >= 5)
					from collect( TempRuim(
						lote.getCamara() == $camara, 
						inicio.getTime() <= tempoAtual() && >= (tempoAtual() - Constante.SemanaEmMili)
						)
					)
	then
		System.out.println("\n\n Possivel Defeito na Camara!!! \n\n");
		$camara.setAlertaDefeito(true);
		$camara.setFoiAlterada(true);
		update($camara);
end

rule "Camara Ficou OK"
	when
		$camara: Camara(alertaDefeito == true)
		$tempsRuins: ArrayList(size < 5)
					from collect( TempRuim(
						lote.getCamara() == $camara, 
						inicio.getTime() <= tempoAtual() && >= (tempoAtual() - Constante.SemanaEmMili)
						)
					)
	then
		System.out.println("\n\n Camara Ficou OK!!! \n\n");
		$camara.setAlertaDefeito(false);
		$camara.setFoiAlterada(true);
		update($camara);
end


// CONSULTAS (QUERIES)
query "novasTempRuim"
	tempRuim: TempRuim(foiAlterada)
end

query "novosDescartes"
	descarte: Descarte(id == null)
end

query "camarasAlteradas"
	camara: Camara(foiAlterada)
end

/* 
	FAZER:
	- Regra para mal funcionamento da Camara.
	- Transformar Historito Camara em: LeituraSensorTemp (EVENTO).
	- Regra de descarte por variação brusca de temperatura usando evento.
	- Usar TMS.
	- TALVEZ MUDAR CHECKTEMP PARA DENTRO DO DROOLS
*/